//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PlantStoreAPI.DataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PlantStoreDBContext : DbContext
    {
        public PlantStoreDBContext()
            : base("name=PlantStoreDBContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<SubMenu> SubMenus { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<BillingContact> BillingContacts { get; set; }
        public virtual DbSet<ShippingContact> ShippingContacts { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderBillingContact> OrderBillingContacts { get; set; }
        public virtual DbSet<OrderShippingContact> OrderShippingContacts { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
    
        public virtual int sp_add_user(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_add_user", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Product> SPGetProducts(Nullable<int> productId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Product>("SPGetProducts", productIdParameter);
        }
    
        public virtual ObjectResult<Product> SPGetProducts(Nullable<int> productId, MergeOption mergeOption)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Product>("SPGetProducts", mergeOption, productIdParameter);
        }
    
        public virtual int SPUpdatePassword(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPUpdatePassword", usernameParameter, passwordParameter);
        }
    
        public virtual int SPUpdateContactInfo(string username, string firstname, string lastname, string address, string apt, string city, string state, string zipcode, string phonenumber, string email, Nullable<bool> isshipping)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var aptParameter = apt != null ?
                new ObjectParameter("apt", apt) :
                new ObjectParameter("apt", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var zipcodeParameter = zipcode != null ?
                new ObjectParameter("zipcode", zipcode) :
                new ObjectParameter("zipcode", typeof(string));
    
            var phonenumberParameter = phonenumber != null ?
                new ObjectParameter("phonenumber", phonenumber) :
                new ObjectParameter("phonenumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var isshippingParameter = isshipping.HasValue ?
                new ObjectParameter("isshipping", isshipping) :
                new ObjectParameter("isshipping", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPUpdateContactInfo", usernameParameter, firstnameParameter, lastnameParameter, addressParameter, aptParameter, cityParameter, stateParameter, zipcodeParameter, phonenumberParameter, emailParameter, isshippingParameter);
        }
    
        public virtual ObjectResult<SPGetContactInformation_Result> SPGetContactInformation(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetContactInformation_Result>("SPGetContactInformation", usernameParameter);
        }
    }
}
